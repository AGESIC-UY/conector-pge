apply plugin: 'java'
apply plugin: 'war'

def tomcatHome = System.properties['tomcat.home']
def tomcatDeployment = tomcatHome + '/webapps/'

repositories {
    mavenCentral()
    mavenLocal()
}

def springIntegrationVersion = '4.3.12.RELEASE'
def commonsIoVersion = '2.6'
def mailVersion = '1.4'
def cxfVersion = '3.2.1'
def mockitoVersion = '1.9.5'
def hamcrestVersion = '1.3'
def wss4jVersion = '1.6.19'
def openSamlVersion = '2.6.4'

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

dependencies {
    compile project(':connector-services')
    compile "org.springframework.integration:spring-integration-http:$springIntegrationVersion"
    compile "org.springframework.integration:spring-integration-jmx:$springIntegrationVersion"
    compile "org.apache.httpcomponents:httpclient:4.5.3"
    compile "commons-io:commons-io:$commonsIoVersion"
    compile "org.opensaml:opensaml:$openSamlVersion"
    compile "org.apache.ws.security:wss4j:$wss4jVersion"
    compile "javax.mail:mail:$mailVersion"
    testCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
    testCompile "org.apache.cxf:cxf-core:$cxfVersion"
    testCompile "org.apache.cxf:cxf-rt-frontend-jaxws:$cxfVersion"
    testCompile "org.apache.cxf:cxf-rt-transports-http:$cxfVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
}

test{
    exclude '**/*IntegTest.class'
    reports.html.destination = file ("$reports.html.destination/unit")
    reports.junitXml.destination = file("$reports.junitXml.destination/unit")
}

task integrationTest(type: Test){
    include '**/*IntegTest.class'
    reports.html.destination = file("$reports.html.destination/integration")
    reports.junitXml.destination = file("$reports.junitXml.destination/integration")
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

war {
    archiveName = 'connector-runtime.war'
}

task undeploy(type: Delete) {
    group 'deployment'
    delete tomcatDeployment + war.archiveName
}

// usage gradle connector-integration:deploy -Denvironment=develop -Dtomcat.home=complete with tomcat location
task deploy(dependsOn: [':connector-integration:war'], type: Copy) {
    group 'deployment'
    from "$buildDir/libs/" + war.archiveName
    into tomcatDeployment
}