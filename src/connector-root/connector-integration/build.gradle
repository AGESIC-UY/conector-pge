apply plugin: 'java'
apply plugin: 'war'

def tomcatHome = System.properties['tomcat.home']
def tomcatDeployment = tomcatHome + '/webapps'

def wildflyHome = System.properties['wildfly.home']
def wildflyDeployment = wildflyHome + '/standalone/deployments'

repositories {
    mavenCentral()
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
}

def springIntegrationVersion = '4.3.12.RELEASE'
def commonsIoVersion = '2.6'
def mailVersion = '1.4'
def cxfVersion = '3.2.1'
def mockitoVersion = '1.9.5'
def hamcrestVersion = '1.3'
def wss4jVersion = '1.6.19'
def openSamlVersion = '2.6.4'
def servletApiVersion = "3.1.0"

sourceSets {
    integrationTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

dependencies {
    compile project(':connector-services')
    compile "org.springframework.integration:spring-integration-http:$springIntegrationVersion"
    compile "org.springframework.integration:spring-integration-jmx:$springIntegrationVersion"
    compile "org.apache.httpcomponents:httpclient:4.5.3"
    compile "commons-io:commons-io:$commonsIoVersion"
    compile "org.opensaml:opensaml:$openSamlVersion"
    compile "org.apache.ws.security:wss4j:$wss4jVersion"
    compile "javax.mail:mail:$mailVersion"
    compileOnly group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    compile group: 'javax.xml.soap', name: 'javax.xml.soap-api', version: '1.4.0'
    compile group: 'com.sun.xml.messaging.saaj', name: 'saaj-impl', version: '1.5.1'
    testCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
    testCompile "org.apache.cxf:cxf-core:$cxfVersion"
    testCompile "org.apache.cxf:cxf-rt-frontend-jaxws:$cxfVersion"
    testCompile "org.apache.cxf:cxf-rt-transports-http:$cxfVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
    providedCompile "javax.servlet:javax.servlet-api:$servletApiVersion"
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

test{
    exclude '**/*IntegTest.class'
    reports.html.destination = file ("$reports.html.destination/unit")
    reports.junitXml.destination = file("$reports.junitXml.destination/unit")
}

task integrationTest(type: Test){
    include '**/*IntegTest.class'
    reports.html.destination = file("$reports.html.destination/integration")
    reports.junitXml.destination = file("$reports.junitXml.destination/integration")
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

war {
    archiveFileName = 'connector-runtime.war'
}

def filesToCopy = copySpec {
    from "$buildDir/libs/${war.archiveFileName.get()}"
}

// usage gradle connector-integration:deploy -Denvironment=develop -Dtomcat.home=complete with tomcat location -Dwildfly.home=complete with wildfly location
task deploy(type: Copy) {
    print("Copy $filesToCopy to $wildflyDeployment\n")
    copy {
        with filesToCopy
        into wildflyDeployment
    }
    def newName = "ROOT.war"
    print("Copy $filesToCopy to $tomcatDeployment and rename it as $newName\n")
    copy {
        with filesToCopy
        into tomcatDeployment
        rename { newName }
    }
}

// usage gradle connector-web:undeploy -Denvironment=develop -Dtomcat.home=complete with tomcat location -Dwildfly.home=complete with wildfly location
//task undeploy(type: Delete) {
//    [wildflyDeployment, tomcatDeployment].each { dest ->
//        def pathToFile = "$dest/${ war.archiveFileName.get() }"
//        print("Delete $pathToFile\n")
//        delete pathToFile
//    }
//}